#include <iostream>
using namespace std;
#include <time.h>

class Node
{
public:
    string data;
    Node* next;
    Node()
    {
        next = NULL;
    }

    Node(string newdata)
    {
        this->data = newdata;
        this->next = NULL;
    }
};

class linkedlist
{
public:
    Node* head;

    linkedlist()
    {
        head = NULL;
    }

    void printlist()
    {
        Node* temp = head;
        if (head == NULL)
        {
            return;
        }
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        return;
    }

    void appendlast(string newdata)
    {
        Node* newnode = new Node(newdata);
        Node* temp = head;

        if (head == NULL)
        {
            head = newnode;
            return;
        }

        while (temp->next != NULL)
        {
            temp = temp->next;
        }

        temp->next = newnode;
        newnode->next = NULL;
        return;
    }

    void deleteall()
    {
        while (head != NULL)
        {
            Node* temp = head;
            head = head->next;
            free(temp);
        }
    }
};

class Max_combination
{
private:
    linkedlist ll;
    int i, j, ind, size, count = 0, flag = 0, max1 = 0, max = 0;

public:
    Max_combination()
    {
        count = flag = max1 = max = 0;

    }

    void Calculate_max_outlets(void)
    {
        cout << "Enter size (<50): \n";

    X:

        cin >> size;
        string outlets[size], lamps[size];
        if (size > 50)
        {
            cout << "Please re-enter the size (<50): ";
            goto X;
        }

        //clock_t start = clock();

        for (int i = 0; i < size; i++)
        {
            cin >> outlets[i];
        }

        for (int i = 0; i < size; i++)
        {
            cin >> lamps[i];
        }

        for (i = 0; i < size; i++)
        {
            ind = i;
            for (j = 0; j < size; j++)
            {
                if (outlets[ind] == lamps[j])
                {
                    flag = 1;
                    count++;
                    ind++;
                }
                if (j == size - 1)
                {
                    if (count > max1)
                    {
                        max1 = count;
                    }
                    count = 0;
                }
            }
        }
        max = max1;
        cout << max << endl;

        max1 = 0;

        for (i = 0; i < size; i++)
        {
            ind = i;
            for (j = 0; j < size; j++)
            {
                if (outlets[ind] == lamps[j])
                {
                    ll.appendlast(outlets[ind]);
                    count++;
                    ind++;
                }
                if (j == size - 1)
                {
                    if (count > max1)
                    {
                        max1 = count;
                    }
                    count = 0;
                }
            }

            if (max1 != max)
            {
                ll.deleteall();
            }
            else
                break;
        }

        ll.printlist();
       /* clock_t end = clock();
        double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
        cout << cpu_time_used;*/
    }


};

int main()
{

    Max_combination obj;
    obj.Calculate_max_outlets();
    return 0;
}
